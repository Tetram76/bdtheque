<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<Script>
  <Infos>
    <Auteur>Tetram Corp</Auteur>
    <Description/>
    <ScriptVersion>1.1</ScriptVersion>
    <BDVersion>2.2.0.0</BDVersion>
    <LastUpdate>Thu, 9 Jun 2011 16:18:01 +0200</LastUpdate>
    <Alias aka="Soleil Productions"/>
  </Infos>
  <Options/>
  <Code>program Soleil;

uses ScriptFonctions;

const
  urlSite = &apos;http://soleilprod.com&apos;;
  urlSearch = &apos;/recherche&apos;;

  regExResultAlbums = &apos;&lt;table(?:.*?)&gt;[\r|\n|\t|\s]*&lt;tr&gt;[\r|\n|\t|\s]*&lt;td class=&quot;titreResultat&quot;&gt;Dans les albums(?s-:.*?)&lt;/tr&gt;((?s-).*?)&lt;/table&gt;&apos;;
  regExResult = &apos;&lt;span class=&quot;bloctxt-03&quot;&gt;&lt;a(?: href=&quot;(?&lt;lien&gt;.*?)&quot;|.*?)*&gt;(?&lt;titre_album&gt;.*?)&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;[\r|\n|\t|\s]*&lt;span class=&quot;bloctxt-06&quot;&gt;(?&lt;commentaire&gt;(?s-).*?)&lt;/span&gt;&apos;;

  regExAlbumTitre = &apos;&lt;span id=&quot;ctl0_ctl0_Main_MainCatalogue_titre&quot;&gt;(?&lt;titre_album&gt;.*?)(?:&lt;br/&gt;vol\.(?&lt;tome&gt;\d*))?&lt;/span&gt;&apos;;
  regExAlbumSerie = &apos;&lt;td valign=&quot;top&quot; class=&quot;cat-genre&quot;&gt;Genre&amp;nbsp;:&amp;nbsp;&lt;a(?:.*?)&gt;(?&lt;genre&gt;.*?)&lt;/a&gt;&lt;br/&gt;Collection&amp;nbsp;:&amp;nbsp;&lt;a(?:.*?)&gt;(?&lt;collection&gt;.*?)&lt;/a&gt;&amp;nbsp;\|&amp;nbsp;S&#xE9;rie&amp;nbsp;:&amp;nbsp;&lt;a(?: href=&quot;(?&lt;lien_serie&gt;.*?)&quot;|.*?)*&gt;(?&lt;titre_serie&gt;.*?)&lt;/a&gt;&lt;/td&gt;&apos;;
  regExAlbumCouverture = &apos;&lt;div id=&quot;image_box_ctl0_ctl0_Main_MainCatalogue_ctl0&quot;&gt;[\r|\n|\t|\s]*&lt;a(?: href=&quot;(?&lt;couverture&gt;.*?)&quot;|.*?)*&gt;&lt;img(?:.*?)&gt;&lt;/a&gt;[\r|\n|\t|\s]*&lt;/div&gt;&apos;;
  regExAlbumParution = &apos;&lt;span id=&quot;ctl0_ctl0_Main_MainCatalogue_date_sortie&quot;&gt;(.*?)&lt;/span&gt;&apos;;
  regExAlbumISBN = &apos;&lt;span id=&quot;ctl0_ctl0_Main_MainCatalogue_ean&quot;&gt;([\d|x|X|-]*)&lt;/span&gt;&apos;;
  regExAlbumResume = &apos;&lt;span id=&quot;ctl0_ctl0_Main_MainCatalogue_resume&quot;&gt;((?s-).*?)(?:&lt;/div&gt;|&lt;u&gt;|&lt;/span&gt;)&apos;; // laisser &lt;/span&gt; en dernier
  regExAlbumPrix = &apos;&lt;span id=&quot;ctl0_ctl0_Main_MainCatalogue_prix&quot;&gt;([\d|,|\.]*)&amp;nbsp;&amp;euro;&lt;/span&gt;&apos;;
  regExAlbumScenariste = &apos;&lt;span id=&quot;ctl0_ctl0_Main_MainCatalogue_scenariste&quot;&gt;((?s-).*?)&lt;/span&gt;&apos;;
  regExAlbumDessinateur = &apos;&lt;span id=&quot;ctl0_ctl0_Main_MainCatalogue_dessinateur&quot;&gt;((?s-).*?)&lt;/span&gt;&apos;;
  regExAlbumColoriste = &apos;&lt;span id=&quot;ctl0_ctl0_Main_MainCatalogue_coloriste&quot;&gt;((?s-).*?)&lt;/span&gt;&apos;;

  regExAuteur = &apos;&lt;a(?:.*?)&gt;(.*?)&lt;/a&gt;&apos;;

procedure ParseAlbum(const id_album: string);
var
  lien, page, pageserie, sAuteur, metier, s: string;
  re: TBdtkRegEx;
  sl: TStringList;
  p: Integer;
  AuteursSerie: Boolean;
begin
  lien := CombineURL(urlSite, id_album);
  page := GetPage(lien, False);
  AuteursSerie := False;

  with TStringList.Create do
    try
      Split(ExtractRegEx(page, regExAlbumParution), &apos;/&apos;);
      if Count &gt; 0 then
        AlbumToImport.AnneeParution := StrToIntDef(Strings[Count - 1], 0);
      if Count &gt; 1 then
        AlbumToImport.MoisParution := TraduitMois(Strings[Count - 2]);
    finally
      Free;
    end;

  AlbumToImport.Edition.ISBN := ExtractRegEx(page, regExAlbumISBN);
  AlbumToImport.Sujet.Text := HTMLText(ExtractRegEx(page, regExAlbumResume));
  AlbumToImport.Edition.Prix := StrToFloatDef(ExtractRegEx(page, regExAlbumPrix), 0);

  re := TBdtkRegEx.Create;
  try
    if re.BeginSearch(page, regExAlbumTitre) and re.Next then
    begin
      AlbumToImport.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_album&apos;));
      AlbumToImport.Tome := StrToIntDef(re.GetCaptureByName(&apos;tome&apos;), 0);
    end;

    if re.BeginSearch(page, regExAlbumSerie) and re.Next then
    begin
      AlbumToImport.Serie.Titre := PrepareTitre(re.GetCaptureByName(&apos;titre_serie&apos;));
      AlbumToImport.Serie.SiteWeb := CombineURL(lien, re.GetCaptureByName(&apos;lien_serie&apos;));
      AlbumToImport.Serie.Genres.Add(re.GetCaptureByName(&apos;genre&apos;));

      AlbumToImport.Serie.Editeur.NomEditeur := &apos;Soleil&apos;;
      AlbumToImport.Serie.Editeur.SiteWeb := urlSite;
      AlbumToImport.Serie.Collection := re.GetCaptureByName(&apos;collection&apos;);
      AlbumToImport.Edition.Editeur.NomEditeur := AlbumToImport.Serie.Editeur.NomEditeur;
      AlbumToImport.Edition.Editeur.SiteWeb := AlbumToImport.Serie.Editeur.SiteWeb;
      AlbumToImport.Edition.Collection := AlbumToImport.Serie.Collection;
    end;

    if AlbumToImport.Serie.SiteWeb &lt;&gt; &apos;&apos; then
    begin
      pageserie := GetPage(AlbumToImport.Serie.SiteWeb, False);
      AlbumToImport.Serie.Sujet.Text := HTMLText(ExtractRegEx(pageserie, regExAlbumResume));

      if re.BeginSearch(ExtractRegEx(pageserie, regExAlbumScenariste), regExAuteur) then
        while re.Find(sAuteur) do
        begin
          AlbumToImport.Serie.Scenaristes.Add(MakeAuteur(sAuteur, maScenariste));
          AuteursSerie := True;
        end;

      if re.BeginSearch(ExtractRegEx(pageserie, regExAlbumDessinateur), regExAuteur) then
        while re.Find(sAuteur) do
        begin
          AlbumToImport.Serie.Dessinateurs.Add(MakeAuteur(sAuteur, maDessinateur));
          AuteursSerie := True;
        end;

      if re.BeginSearch(ExtractRegEx(pageserie, regExAlbumColoriste), regExAuteur) then
        while re.Find(sAuteur) do
        begin
          AlbumToImport.Serie.Coloristes.Add(MakeAuteur(sAuteur, maColoriste));
          AuteursSerie := True;
        end;
    end;

    if re.BeginSearch(ExtractRegEx(page, regExAlbumScenariste), regExAuteur) then
      while re.Find(sAuteur) do
      begin
        AlbumToImport.Scenaristes.Add(MakeAuteur(sAuteur, maScenariste));
        if not AuteursSerie then
          AlbumToImport.Serie.Scenaristes.Add(MakeAuteur(sAuteur, maScenariste));
      end;

    if re.BeginSearch(ExtractRegEx(page, regExAlbumDessinateur), regExAuteur) then
      while re.Find(sAuteur) do
      begin
        AlbumToImport.Dessinateurs.Add(MakeAuteur(sAuteur, maDessinateur));
        if not AuteursSerie then
          AlbumToImport.Serie.Dessinateurs.Add(MakeAuteur(sAuteur, maDessinateur));
      end;

    if re.BeginSearch(ExtractRegEx(page, regExAlbumColoriste), regExAuteur) then
      while re.Find(sAuteur) do
      begin
        AlbumToImport.Coloristes.Add(MakeAuteur(sAuteur, maColoriste));
        if not AuteursSerie then
          AlbumToImport.Serie.Coloristes.Add(MakeAuteur(sAuteur, maColoriste));
      end;
  finally
    re.Free;
  end;

  s := ExtractRegEx(page, regExAlbumCouverture);
  if s &lt;&gt; &apos;&apos; then
    AlbumToImport.Edition.AddImageFromURL(CombineURL(lien, s), ctiCouverture);

  AlbumToImport.Import;
end;

function RechercheParTitre(const Titre: string): string;
var
  page: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
  id, titre_album, commentaire: string;
  Pieces: array of RAttachement;
begin
  Result := &apos;&apos;;
  SetLength(Pieces, 3);
  Pieces[0].Nom := &apos;SearchForm[mode]&apos;;
  Pieces[0].Valeur := &apos;0&apos;;
  Pieces[0].isFichier := False;
  Pieces[1].Nom := &apos;SearchForm[term]&apos;;
  Pieces[1].Valeur := Titre;
  Pieces[1].isFichier := False;
  Pieces[2].Nom := &apos;yt1&apos;;
  Pieces[2].Valeur := &apos;submit&apos;;
  Pieces[2].isFichier := False;
  page := PostPage(urlSite + urlSearch, Pieces, False);

writetoconsole(urlSite + urlSearch + &apos; - &apos; + Titre);
writetoconsole(page);

  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;R&#xE9;sultats de recherche de &quot;&apos; + Titre + &apos;&quot;&apos;;
    if re.BeginSearch(ExtractRegEx(page, regExResultAlbums), regExResult) then
      while re.Next do begin
        id := re.GetCaptureByName(&apos;lien&apos;);
        titre_album := re.GetCaptureByName(&apos;titre_album&apos;);
        commentaire := re.GetCaptureByName(&apos;commentaire&apos;);
        c.AjoutChoix(&apos;&apos;, HTMLDecode(titre_album), HTMLText(commentaire), id);
      end;

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

var
  id_album, entry: string;
  index: integer;
begin
  entry := AlbumToImport.DefaultSearch;
  index := 0;
  if not AskSearchEntry([&apos;Titre de l&apos;&apos;album ou de la s&#xE9;rie&apos;, &apos;Lien&apos;], entry, index) then Exit;

  id_album := &apos;&apos;;
  case index of
    0: id_album := RechercheParTitre(entry);
    1: id_album := entry
  end;

  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end.</Code>
</Script>
