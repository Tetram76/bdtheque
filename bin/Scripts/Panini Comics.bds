program PaniniComics;

uses ScriptFonctions;

const
  urlSite = 'http://www.paninicomicsfrance.com/';
  urlSearch = 'Titolo.jsp?recherche&PagerCurrentPage=%d&FiltroRicercaRapida=';
  urlInfoAlbum = 'Titolo.jsp?IdTitolo='; // + id_album

  regExResultAlbums = '<h3>Résultat de la recherche</h3><table(?:.*?)>(.*?)</table>';
  regExResult = '<tr class(?:.*?)><td><img(?:.*?)/></td><td>(?<album>.*?)</td>(?:<td(?:.*?)>(?:.*?)</td>)*?<td><a href="Titolo.jsp\?IdTitolo=(?<id_album>.*?)"(?:.*?)></a></td>(?:<td(?:.*?)>(?:.*?)</td>)*?</tr>';
  regExResultNbPages = '<input name="PagerLastPage" type="hidden" value="(\d*?)"/>';

  regExInfosAlbum = '(<div id="contentinterno"(?:.*?)« BACK)';
  regExAlbumTitres = '<div id="contentinterno" xmlns=""><hr/><h3>(?<titre_serie>.*?)</h3><h2>(?<titre_album>\D*?)(?:\s*?)(?<tome>\d*?)</h2>';
  regExAlbumCouverture = '<img alt="" border="0" class="imgright" height="303" src="(?<couverture>.*?)" width="200"/>';
  regExAlbumEdition = '<span class="subheading">prix:(?:.*?)(?<prix>[\d|\.|,]*?)</span>(?:.*)<span class="subheading">(?<parution>.*?)<br>(?<collection>.*?)(?:<br>(?:(?<nbpage>\d*?) pages |(?:.*?)))*?</span>(?:Auteur : (?<auteur>.*?)(?:<br>)+)*(?<resume>.*?)</p><div id="paginato">';

procedure ParseAlbum(const id_album: string);
var
  page, s: string;
  sl: TStringList;
begin
  page := GetPage(urlSite + urlInfoAlbum + id_album, False);
  page := ExtractRegEx(page, regExInfosAlbum);

  AlbumToImport.Titre := ExtractRegExGroup(page, regExAlbumTitres, 'titre_album');
  AlbumToImport.Tome := StrToIntDef(ExtractRegExGroup(page, regExAlbumTitres, 'tome'), 0);
  AlbumToImport.Serie.Titre := ExtractRegExGroup(page, regExAlbumTitres, 'titre_serie');
  if AlbumToImport.Titre = AlbumToImport.Serie.Titre then AlbumToImport.Titre := '';

  s := ExtractRegExGroup(page, regExAlbumEdition, 'auteur');
  if s <> '' then
  begin
    AlbumToImport.Scenaristes.Add(MakeAuteur(s, maScenariste));
    AlbumToImport.Dessinateurs.Add(MakeAuteur(s, maDessinateur));
  end;

  sl := TStringList.Create;
  try
    sl.Split(ExtractRegExGroup(page, regExAlbumEdition, 'parution'), '/');
    if sl.Count > 0 then
      AlbumToImport.AnneeParution := StrToIntDef(sl[sl.Count - 1], 0);
    if sl.Count > 1 then
      AlbumToImport.MoisParution := TraduitMois(sl[sl.Count - 2]);
  finally
    sl.Free;
  end;

  AlbumToImport.Sujet.Text := HTMLText(ExtractRegExGroup(page, regExAlbumEdition, 'resume'));

  AlbumToImport.Edition.Editeur.NomEditeur := 'Panini';
  AlbumToImport.Edition.Editeur.SiteWeb := 'http://www.paninicomicsfrance.com/Home.jsp';
  AlbumToImport.Edition.Collection := ExtractRegExGroup(page, regExAlbumEdition, 'collection');
  AlbumToImport.Edition.NombreDePages := StrToIntDef(ExtractRegExGroup(page, regExAlbumEdition, 'nbpages'), 0);
  AlbumToImport.Edition.Prix := StrToFloatDef(ExtractRegExGroup(page, regExAlbumEdition, 'prix'), 0);

  s := ExtractRegEx(page, regExAlbumCouverture);
  if s <> '' then
    AlbumToImport.Edition.AddImageFromURL(CombineURL(urlSite + urlInfoAlbum + id_album, s), ctiCouverture);

  AlbumToImport.Import;
end;

function RechercheParTitre(const Titre: string): string;
var
  page: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
  nbpages, p: integer;
  id, titre_album, commentaire: string;
begin
  Result := '';
  p := 1;
  page := GetPage(urlSite + Format(urlSearch, [p]) + Titre, False);
  nbpages := StrToIntDef(ExtractRegEx(page, regExResultNbPages), 1);

  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := 'Résultats de recherche de "' + Titre + '"';
    while True do
    begin
      if re.BeginSearch(ExtractRegEx(page, regExResultAlbums), regExResult) then
        while re.Next do begin
          id := re.GetCaptureByName('id_album');
          with TStringList.Create do
            try
              Text := StringReplace(re.GetCaptureByName('album'), '<br>', #13, [rfReplaceAll]);
              titre_album := Strings[0];
              Delete(0);
              commentaire := Text;
            finally
              Free;
            end;
          c.AjoutChoix('Album', titre_album, commentaire, id);
        end;

      p := p + 1;
      if p > nbpages then Break;
      page := GetPage(urlSite + Format(urlSearch, [p]) + Titre, False);
    end;

    Result := c.Show;
  finally
    re.Free;
    c.Free;
  end;
end;

var
  id_album, entry: string;
  index: integer;
begin
  if not AskSearchEntry(['Titre de l''album ou de la série'], entry, index) then Exit;

  id_album := RechercheParTitre(entry);
  if id_album <> '' then
    ParseAlbum(id_album);
end.
