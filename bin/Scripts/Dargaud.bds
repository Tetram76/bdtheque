<?xml version="1.0" encoding="iso-8859-1"?>
<Script>
  <Options/>
  <Code>program Dargaud;

uses ScriptFonctions;

const
  urlSearch = &apos;http://www.dargaud.com/front/recherche/default.aspx?mot=&apos;;
  urlInfoAlbum = &apos;http://www.dargaud.com/front/albums/xml/album.aspx?id=&apos;; // + id_album
  urlInfoAlbumPlanches = &apos;http://www.dargaud.com/front/albums/xml/planches.aspx?id=&apos;; // + id_album
  urlInfoAlbumSerie = &apos;http://www.dargaud.com/front/albums/xml/album_serie.aspx?id=&apos;; // + id_album

  urlInfoSerie = &apos;http://www.dargaud.com/front/albums/series/xml/serie.aspx?id=&apos;; // + id_serie
  urlPageSerie = &apos;http://www.dargaud.com/front/albums/series/serie.aspx?id=&apos;; // + id_serie

  regExResultAlbums = &apos;&lt;object id=&apos;&apos;header(?:.*?)classid=&apos;&apos;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000(?:.*?)value=(?:.*?)titre=Albums(?:.*?)&lt;/object&gt;&lt;/td&gt;[\r|\n|\t|\s]*((?s-).*?)[\r|\n|\t|\s]*&lt;td&gt;&amp;nbsp;&lt;/td&gt;&apos;;
  regExResultSeries = &apos;&lt;object id=&apos;&apos;header(?:.*?)classid=&apos;&apos;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000(?:.*?)value=(?:.*?)titre=Séries(?:.*?)&lt;/object&gt;&lt;/td&gt;[\r|\n|\t|\s]*((?s-).*?)[\r|\n|\t|\s]*&lt;td&gt;&amp;nbsp;&lt;/td&gt;&apos;;
  regExResult = &apos;&lt;td class=&quot;result&quot;&gt;&lt;span&gt;(?:.*?)&lt;/span&gt;(.*?)&lt;/td&gt;&apos;;
  regExResultAlbumsTitre = &apos;&lt;a class=&quot;rechercheBold&quot; href=&quot;(?:.*?)&quot;&gt;(.*?)&lt;/a&gt;&apos;;
  regExResultAlbumsDetails = &apos;&lt;br&gt;&amp;nbsp;&amp;nbsp;%s&amp;nbsp;: &lt;/span&gt;&lt;a class=&quot;recherche&quot; href=(?:.*?)&gt;(.*?)&lt;/a&gt;&apos;;

  regExSerieInfos = &apos;&lt;serie(?: id=&quot;(?&lt;id_serie&gt;\d*)&quot;| titre=&quot;(?&lt;titre_serie&gt;.*?)&quot;| texte=&quot;(?&lt;resume&gt;.*?)&quot;|.*?)*&gt;(?s-:.*?)&lt;/serie&gt;&apos;;
  // pcre refuse qu&apos;on utilise une seule expression (manifestement un bug)
  // regExSerieDetails = &apos;&lt;serie(?s-:.*?)&gt;(?s-:&lt;peoples&gt;(?&lt;auteurs&gt;.*?)&lt;/peoples&gt;|&lt;albums&gt;(?&lt;albums&gt;.*?)&lt;/albums&gt;|.*?)*&lt;/serie&gt;&apos;;
  regExSerieAlbums = &apos;&lt;serie(?s-:.*?)&gt;(?s-:.*?)&lt;albums&gt;(?&lt;albums&gt;.*?)&lt;/albums&gt;(?s-:.*?)&lt;/serie&gt;&apos;;
  regExSerieAuteurs = &apos;&lt;serie(?s-:.*?)&gt;(?s-:.*?)&lt;peoples&gt;(?&lt;auteurs&gt;.*?)&lt;/peoples&gt;(?s-:.*?)&lt;/serie&gt;&apos;;
  regExSerieAlbum = &apos;&lt;album(?: type=&quot;(?&lt;type&gt;.*?)&quot;| id=&quot;(?&lt;id_album&gt;\d*)&quot;| titre=&quot;(?&lt;titre_album&gt;.*?)&quot;| auteurs=&quot;(?&lt;auteurs&gt;.*?)&quot;| annee=&quot;(?&lt;annee&gt;\d*?)&quot;|.*?)*/&gt;&apos;;

  regExAlbumSerieInfos = &apos;&lt;album_serie(?: ser_id=&quot;(?&lt;id_serie&gt;\d*)&quot;| nbr_alb=&quot;(?&lt;nbalbums&gt;\d*)&quot;| ser_titre=&quot;(?&lt;titre_serie&gt;.*?)&quot;|.*?)*&gt;(?s-:.*?)&lt;/album_serie&gt;&apos;;
  regExAlbumInfos = &apos;&lt;album(?: id=&quot;(?&lt;id_album&gt;\d*)&quot;| texte=&quot;(?&lt;resume&gt;.*?)&quot;| prix=&quot;(?&lt;prix&gt;.*?)&quot;| tome=&quot;(?:\D*?)(?&lt;tome&gt;\d*?)&quot;| pages=&quot;(?&lt;nbpages&gt;\d*)&quot;| isbn=&quot;(?&lt;isbn&gt;[\d|X]*)&quot;| titre=&quot;(?&lt;titre&gt;.*?)&quot;| date=&quot;(?&lt;parution&gt;.*?)&quot;|.*?)*&gt;(?s-:.*?)&lt;peoples&gt;(?&lt;auteurs&gt;.*?)&lt;/peoples&gt;(?s-:.*?)&lt;/album&gt;&apos;;
  regExAuteurInfos = &apos;&lt;people(?: type=&quot;(?&lt;metier&gt;.*?)&quot;| nom=&quot;(?&lt;nom&gt;.*?)&quot;|.*?)*/&gt;&apos;;
  regExAlbumPlanche = &apos;&lt;media chemin=&quot;(.*?)&quot; /&gt;&apos;;

procedure ParseAlbum(const id_album: string);
var
  page, metier, s: string;
  re: TBdtkRegEx;
  sl: TStringList;
  p: Integer;
begin
  with TBdtkRegEx.Create do
  try
    // album
    page := GetPage(urlInfoAlbum + id_album, True);
    if BeginSearch(page, regExAlbumInfos) and Next then begin
      AlbumToImport.Titre := PrepareTitre(GetCaptureByName(&apos;titre&apos;));
      AlbumToImport.Tome := StrToIntDef(GetCaptureByName(&apos;tome&apos;), 0);

      sl := TStringList.Create;
      try
        sl.Split(GetCaptureByName(&apos;parution&apos;), &apos; &apos;);
        if sl.Count &gt; 0 then
          AlbumToImport.AnneeParution := StrToIntDef(sl[sl.Count - 1], 0);
        if sl.Count &gt; 1 then
          AlbumToImport.MoisParution := TraduitMois(sl[sl.Count - 2]);
      finally
        sl.Free;
      end;

      AlbumToImport.Sujet.Text := HTMLText(GetCaptureByName(&apos;resume&apos;));

      re := TBdtkRegEx.Create;
      try
        if re.BeginSearch(GetCaptureByName(&apos;auteurs&apos;), regExAuteurInfos) then
          while re.Next do
          begin
            metier := re.GetCaptureByName(&apos;metier&apos;);
            if metier = &apos;des&apos; then
              AlbumToImport.Dessinateurs.Add(MakeAuteur(re.GetCaptureByName(&apos;nom&apos;), maDessinateur));
            if metier = &apos;sce&apos; then
              AlbumToImport.Scenaristes.Add(MakeAuteur(re.GetCaptureByName(&apos;nom&apos;), maScenariste));
            if metier = &apos;col&apos; then
              AlbumToImport.Coloristes.Add(MakeAuteur(re.GetCaptureByName(&apos;nom&apos;), maColoriste));
          end;
      finally
        re.Free;
      end;

      AlbumToImport.Edition.Editeur.NomEditeur := &apos;Dargaud&apos;;
      AlbumToImport.Edition.Editeur.SiteWeb := &apos;http://www.dargaud.com&apos;;
      AlbumToImport.Edition.ISBN := GetCaptureByName(&apos;isbn&apos;);
      AlbumToImport.Edition.NombreDePages := StrToIntDef(GetCaptureByName(&apos;nbpages&apos;), 0);
      sl := TStringList.Create;
      try
        sl.Split(GetCaptureByName(&apos;prix&apos;), &apos; &apos;);
        p := sl.IndexOf(&apos;E&apos;);
        if p &gt; 0 then
        begin
          s := &apos;&apos;;
          p := p - 1;
          while p &gt;= 0 do
          begin
            s := s + sl[0];
            p := p - 1;
          end;
          AlbumToImport.Edition.Prix := StrToFloat(StringReplace(s, &apos;,&apos;, &apos;.&apos;, [rfReplaceAll]));
        end;
      finally
        sl.Free;
      end;
    end;

    // lien album serie
    page := GetPage(urlInfoAlbumSerie + id_album, True);
    if BeginSearch(page, regExAlbumSerieInfos) and Next then begin
      AlbumToImport.Serie.Titre := PrepareTitre(GetCaptureByName(&apos;titre_serie&apos;));
      AlbumToImport.Serie.NbAlbums := StrToIntDef(GetCaptureByName(&apos;nbalbums&apos;), 0);
      AlbumToImport.Serie.SiteWeb := urlPageSerie + GetCaptureByName(&apos;id_serie&apos;);
      AlbumToImport.Serie.Editeur.NomEditeur := &apos;Dargaud&apos;;
      AlbumToImport.Serie.Editeur.SiteWeb := &apos;http://www.dargaud.com&apos;;

      // série
      page := GetPage(urlInfoSerie + GetCaptureByName(&apos;id_serie&apos;), True);
      if BeginSearch(page, regExSerieInfos) and Next then begin
        AlbumToImport.Serie.Titre := PrepareTitre(GetCaptureByName(&apos;titre_serie&apos;));
        AlbumToImport.Serie.Sujet.Text := HTMLText(GetCaptureByName(&apos;resume&apos;));
      end;

      re := TBdtkRegEx.Create;
      try
        if re.BeginSearch(ExtractRegEx(page, regExSerieAuteurs), regExAuteurInfos) then
          while re.Next do
          begin
            metier := re.GetCaptureByName(&apos;metier&apos;);
            if metier = &apos;des&apos; then
              AlbumToImport.Serie.Dessinateurs.Add(MakeAuteur(re.GetCaptureByName(&apos;nom&apos;), maDessinateur));
            if metier = &apos;sce&apos; then
              AlbumToImport.Serie.Scenaristes.Add(MakeAuteur(re.GetCaptureByName(&apos;nom&apos;), maScenariste));
            if metier = &apos;col&apos; then
              AlbumToImport.Serie.Coloristes.Add(MakeAuteur(re.GetCaptureByName(&apos;nom&apos;), maColoriste));
          end;
      finally
        re.Free;
      end;
    end;
  finally
    Free;
  end;

  // couverture et planches
  page := GetPage(urlInfoAlbumPlanches + id_album, True);
  re := TBdtkRegEx.Create;
  try
    p := 1;
    if re.BeginSearch(page, regExAlbumPlanche) then
      while re.Find(s) do
      begin
        s := CombineURL(urlInfoAlbum, s);
        if p = 1 then
          AlbumToImport.Edition.AddImageFromURL(s, ctiCouverture)
        else
          AlbumToImport.Edition.AddImageFromURL(s, ctiPlanche);
        p := p + 1;
      end;
  finally
    re.Free;
  end;

  AlbumToImport.Import;
end;

function RechercheParSerie(const id_serie: string): string;
var
  page: string;
  id_album, titre_album, commentaire: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
begin
  Result := &apos;&apos;;

  page := GetPage(urlInfoSerie + id_serie, True);
  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;Série &quot;&apos; + ExtractRegExGroup(page, regExSerieInfos, &apos;titre_serie&apos;) + &apos;&quot;&apos;;
    if re.BeginSearch(ExtractRegEx(page, regExSerieAlbums), regExSerieAlbum) then
      while re.Next do
        if re.GetCaptureByName(&apos;type&apos;) = &apos;alb&apos; then begin
          id_album := re.GetCaptureByName(&apos;id_album&apos;);
          titre_album := re.GetCaptureByName(&apos;titre_album&apos;);
          commentaire := &apos;&apos;;
          AjoutString1(commentaire, re.GetCaptureByName(&apos;annee&apos;), #13#10, &apos;Année: &apos;, &apos;&apos;);
          AjoutString1(commentaire, re.GetCaptureByName(&apos;auteurs&apos;), #13#10, &apos;Auteur(s): &apos;, &apos;&apos;);
          c.AjoutChoix(&apos;Album&apos;, titre_album, commentaire, id_album);
        end;

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourné de résultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

function RechercheParTitre(const Titre: string): string;
var
  s, sAlbum, sSerie: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
  id, titre_album, commentaire: string;
  Added: Boolean;
begin
  Result := &apos;&apos;;
  s := GetPage(urlSearch + Titre, True);
  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;Résultats de recherche de &quot;&apos; + Titre + &apos;&quot;&apos;;
    Added := False;
    if re.BeginSearch(ExtractRegEx(s, regExResultAlbums), regExResult) then
      while re.Find(sAlbum) do begin
        id := ExtractRegEx(sAlbum, &apos;album\.aspx\?id=(.*?)&quot;&apos;);
        titre_album := ExtractRegEx(sAlbum, regExResultAlbumsTitre);
        commentaire := &apos;&apos;;
        AjoutString1(commentaire, ExtractRegEx(sAlbum, Format(regExResultAlbumsDetails, [&apos;Série&apos;])), #13#10, &apos;Série: &apos;, &apos;&apos;);
        AjoutString1(commentaire, ExtractRegEx(sAlbum, Format(regExResultAlbumsDetails, [&apos;Dessin&apos;])), #13#10, &apos;Dessin: &apos;, &apos;&apos;);
        AjoutString1(commentaire, ExtractRegEx(sAlbum, Format(regExResultAlbumsDetails, [&apos;Scénario&apos;])), #13#10, &apos;Scénario: &apos;, &apos;&apos;);
        c.AjoutChoix(&apos;Album&apos;, titre_album, commentaire, &apos;A&apos; + id);
        Added := True;
      end;
    if not Added then c.AjoutChoix(&apos;Album&apos;, &apos;Aucun&apos;, &apos;&apos;, &apos;&apos;);

    Added := False;
    if re.BeginSearch(ExtractRegEx(s, regExResultSeries), regExResult) then
      while re.Find(sSerie) do begin
        id := ExtractRegEx(sSerie, &apos;serie\.aspx\?id=(.*?)&quot;&apos;);
        titre_album := ExtractRegEx(sSerie, regExResultAlbumsTitre);
        c.AjoutChoix(&apos;Série&apos;, titre_album, &apos;&apos;, &apos;S&apos; + id);
        Added := True;
      end;
    if not Added then c.AjoutChoix(&apos;Série&apos;, &apos;Aucune&apos;, &apos;&apos;, &apos;&apos;);

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourné de résultat.&apos;);

    if Result = &apos;&apos; then Exit;
    if Result[1] = &apos;A&apos; then
      Result := Copy(Result, 2, Length(Result))
    else
      Result := RechercheParSerie(Copy(Result, 2, Length(Result)));
  finally
    re.Free;
    c.Free;
  end;
end;

var
  id_album, entry: string;
  index: integer;
begin
  if not AskSearchEntry([&apos;Titre de l&apos;&apos;album ou de la série&apos;], entry, index) then Exit;

  id_album := RechercheParTitre(entry);
  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end.</Code>
</Script>
