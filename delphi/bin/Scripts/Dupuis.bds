<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Script>
  <Infos>
    <Auteur>Tetram Corp</Auteur>
    <Description/>
    <ScriptVersion>1.3</ScriptVersion>
    <BDVersion>2.2.0.0</BDVersion>
    <LastUpdate>Mon, 17 Oct 2011 16:37:15 +0200</LastUpdate>
  </Infos>
  <Options/>
  <Code>program Dupuis;

uses ScriptFonctions;

const
  urlSearchRoot = &apos;http://www.dupuis.com/servlet/jpsearch?lang=FR&apos;;
  urlSearchGlobale = &apos;&amp;pgm=RESULT_SEARCH_ENGINE_3&amp;researchtype=3&amp;p=1&amp;init=1&amp;sel=1&amp;researchkeyword=&apos;;
  urlSearchCategorie = &apos;&amp;pgm=RESULT_SEARCH_ENGINE&amp;researchtype=%d&amp;p=%d&amp;init=1&amp;sel=1&amp;researchkeyword=&apos;;

  regExResultsGlobale = &apos;&lt;table id=&quot;albums_results&quot;(?s-:.*?)&lt;!-- LIGNE BLANCHE --&gt;[\r|\n|\t]*((?s-).*?)[\r|\n|\t]*&lt;/table&gt;&apos;;
  regExResultsGlobaleLigne = &apos;&lt;tr(?:.*?)&gt;(.*?)&lt;/tr&gt;&apos;;
  regExResultsGlobaleLigneDecoupe = &apos;&lt;td(?:.*?)&gt;(?&lt;Album&gt;.*?)&lt;/td&gt;&lt;td(?:.*?)&gt;(?&lt;Auteurs&gt;.*?)&lt;/td&gt;&lt;td(?:.*?)&gt;(?&lt;Serie&gt;.*?)&lt;/td&gt;&lt;td(?:.*?)&gt;(?&lt;Collection&gt;.*?)&lt;/td&gt;&apos;;

  regExResultsCategorie = &apos;&lt;div id=&quot;box_results&quot;&gt;(?s-:.*?)&lt;table(?s-:.*?)id=&quot;table_results&quot;(?s-:.*?)&lt;tr&gt;(?s-:.*?)&lt;/tr&gt;[\r|\n|\t]*(?&lt;Resultats&gt;(?s-).*?)[\r|\n|\t]*&lt;/table&gt;&apos;;
  regExResultsCategorieNb = &apos;&lt;div id=&quot;infos_results&quot;&gt;(?:\D*?)(?&lt;NbResultats&gt;\d*?)(?:\D*?)&lt;/div&gt;&apos;;
  regExResultsCategorieLigne = &apos;&lt;tr(?:.*?)&gt;(.*?)&lt;tr&gt;&apos;;
  regExResultsCategorieLigneDecoupe = &apos;&lt;td(?:.*?)&gt;(?&lt;Album&gt;.*?)&lt;/td&gt;&lt;td(?:.*?)&gt;(?&lt;Serie&gt;.*?)&lt;/td&gt;&lt;td(?:.*?)&gt;(?&lt;Auteurs&gt;.*?)&lt;/td&gt;&lt;td(?:.*?)&gt;(?&lt;Collection&gt;.*?)&lt;/td&gt;&apos;;

  regExResultsItems = &apos;&lt;a(?:.*?)href=&quot;(?&lt;Lien&gt;.*?)&quot;(?:.*?)&gt;(?&lt;Label&gt;.*?)&lt;/a&gt;&apos;;
  regExResultsSerie = &apos;(?&lt;TitreSerie&gt;.*?) \((?:.*?)\)&apos;;

  regExAlbumSerie = &apos;&lt;!-- TITRE SERIE --&gt;(?s-:.*?)&lt;h2(?:.*?)&gt;&lt;a href=&quot;(?&lt;id_serie&gt;.*?)&quot;&gt;(?&lt;titre_serie&gt;.*?)&lt;/a&gt;(?:\D*?)(?&lt;tome&gt;\d*?)&lt;/h2&gt;&apos;;
  regExAlbumTitre = &apos;&lt;!-- TITRE ALBUM --&gt;(?s-:.*?)&lt;h1(?:.*?)&gt;(?&lt;titre_album&gt;.*?)&lt;/h1&gt;&apos;;
  regExAlbumAuteurs = &apos;&lt;!-- AUTEURS --&gt;(?s-:.*?)&lt;ul id=&quot;auteurs&quot;&gt;((?s-).*?)&lt;/ul&gt;&apos;;
  regExAlbumDessinateurs = &apos;&lt;!-- DESSINATEUR\(S\) --&gt;(?s-:.*?)&lt;li&gt;((?s-).*?)&lt;/li&gt;&apos;;
  regExAlbumScenaristes = &apos;&lt;!-- SCENARISTE\(S\) --&gt;(?s-:.*?)&lt;li&gt;((?s-).*?)&lt;/li&gt;&apos;;
  regExAlbumAuteur = &apos;&lt;a href=\\&quot;(?s-:.*?)\\&quot; &gt;(?&lt;nom&gt;.*?)&lt;/a&gt;&apos;;
  regExAlbumCollection = &apos;&lt;!-- COLLECTIONS --&gt;(?s-:.*?)&lt;h4(?:.*?)&gt;Collection : &lt;a(?s-:.*?)&gt;(?&lt;collection&gt;.*?)&lt;/a&gt;&lt;/h4&gt;&apos;;
  regExAlbumFiche = &apos;&lt;!-- FICHE TECHNIQUE --&gt;(?s-:.*?)&lt;table id=&quot;fiche_tech&quot;(?s-:.*?)&gt;((?s-).*?)&lt;/table&gt;&apos;;
  regExAlbumISBN = &apos;&lt;td(?s-:.*?)&gt;ISBN (.*?)&lt;/td&gt;&apos;;
  regExAlbumParutionPrix = &apos;&lt;td(?s-:.*?)&gt;France: (?&lt;parution&gt;.*?) - (?&lt;prix&gt;.*?) EUR&lt;/td&gt;&apos;;
  regExAlbumNbPages = &apos;&lt;td(?s-:.*?)&gt;(?s-:.*?)(\d*?) pages(?s-:.*?)&lt;/td&gt;&apos;;
  regExAlbumResume = &apos;&lt;!-- RESUME ALBUM --&gt;(?s-:.*?)&lt;!-- ACCROCHE --&gt;[\r|\n|\t]*((?s-).*?)[\r|\n|\t]*&lt;!-- INFOS SUPPLEMENTAIRES --&gt;&apos;;
  regExSerieGenres = &apos;&lt;!-- GENRE --&gt;(?s-:.*?)&lt;h5&gt;Genre : (.*?)&amp;nbsp;&lt;/h5&gt;&apos;;
  regExSerieTerminee = &apos;&lt;!-- ETAT DE LA SERIE --&gt;(?s-:.*?)&lt;h5&gt;(?s-:.*?)&lt;script&gt;var nr=&apos;&apos;(.*?)&apos;&apos;;&apos;;
  regExAlbumCouverture = &apos;&lt;!-- IMAGE ALBUM --&gt;(?s-:.*?)&lt;a href=&quot;(?&lt;image&gt;.*?)&quot;(?s-:.*?)&gt;(?s-:.*?)&lt;/a&gt;&apos;;
  regExAlbumPlanches = &apos;&lt;div id=&quot;planches&quot;&gt;&lt;ul&gt;(?&lt;planches&gt;.*?)&lt;/ul&gt;&apos;;
  regExAlbumPlanche = &apos;&lt;a href=&quot;(?&lt;image&gt;.*?)&quot;(?s-:.*?)&gt;(?s-:.*?)&lt;/a&gt;&apos;;

procedure ParseAlbum(const id_album: string);
var
  page, Auteurs, Fiche, s: string;
  re: TBdtkRegEx;
  sl: TStringList;
begin
  page := GetPage(CombineURL(urlSearchRoot, id_album), False);

  AlbumToImport.Serie.Titre := PrepareTitre(ExtractRegExGroup(page, regExAlbumSerie, &apos;titre_serie&apos;));
  AlbumToImport.Serie.SiteWeb := CombineURL(urlSearchRoot, ExtractRegExGroup(page, regExAlbumSerie, &apos;id_serie&apos;));
  AlbumToImport.Tome := StrToIntDef(ExtractRegExGroup(page, regExAlbumSerie, &apos;tome&apos;), 0);

  AlbumToImport.Titre := PrepareTitre(ExtractRegEx(page, regExAlbumTitre));
  AlbumToImport.Sujet.Text := HTMLText(ExtractRegEx(page, regExAlbumResume));

  re := TBdtkRegEx.Create;
  try
    Auteurs := ExtractRegEx(page, regExAlbumAuteurs);
    if re.BeginSearch(ExtractRegEx(Auteurs, regExAlbumScenaristes), regExAlbumAuteur) then
      while re.Next do
        AlbumToImport.Scenaristes.Add(MakeAuteur(re.GetCaptureByName(&apos;nom&apos;), maScenariste));
    if re.BeginSearch(ExtractRegEx(Auteurs, regExAlbumDessinateurs), regExAlbumAuteur) then
      while re.Next do
        AlbumToImport.Dessinateurs.Add(MakeAuteur(re.GetCaptureByName(&apos;nom&apos;), maDessinateur));
  finally
    re.Free;
  end;

  AlbumToImport.Edition.Editeur.NomEditeur := &apos;Dupuis&apos;;
  AlbumToImport.Edition.Editeur.SiteWeb := &apos;http://www.dupuis.com&apos;;
  AlbumToImport.Edition.Collection := ExtractRegEx(page, regExAlbumCollection);
  if Pos(&apos;TOUS PUBLIC&apos;, UpperCase(AlbumToImport.Edition.Collection)) &gt; 0 then
    AlbumToImport.Edition.Collection := &apos;&apos;;

  Fiche := ExtractRegEx(page, regExAlbumFiche);
  AlbumToImport.Edition.ISBN := CleanISBN(ExtractRegEx(Fiche, regExAlbumISBN));
  sl := TStringList.Create;
  try
    sl.Split(ExtractRegExGroup(Fiche, regExAlbumParutionPrix, &apos;parution&apos;), &apos;/&apos;);
    if sl.Count &gt; 0 then
      AlbumToImport.AnneeParution := StrToIntDef(sl[sl.Count - 1], 0);
    if sl.Count &gt; 1 then
      AlbumToImport.MoisParution := TraduitMois(sl[sl.Count - 2]);
  finally
    sl.Free;
  end;
  AlbumToImport.Edition.Prix := StrToFloat(ExtractRegExGroup(Fiche, regExAlbumParutionPrix, &apos;prix&apos;));
  AlbumToImport.Edition.NombreDePages := StrToIntDef(ExtractRegEx(Fiche, regExAlbumNbPages), 0);

  s := ExtractRegEx(page, regExAlbumCouverture);
  if s &lt;&gt; &apos;&apos; then
    AlbumToImport.Edition.AddImageFromURL(CombineURL(urlSearchRoot, s), ctiCouverture);
  re := TBdtkRegEx.Create;
  try
    s := ExtractRegEx(page, regExAlbumPlanches);
    if re.BeginSearch(s, regExAlbumPlanche) then
      while re.Find(s) do
        if s &lt;&gt; &apos;&apos; then
          AlbumToImport.Edition.AddImageFromURL(CombineURL(urlSearchRoot, s), ctiPlanche);
  finally
    re.Free;
  end;

  page := GetPage(AlbumToImport.Serie.SiteWeb, False);

  s := Trim(ExtractRegEx(page, regExSerieGenres));
  if s &lt;&gt; &apos;&apos; then AlbumToImport.Serie.Genres.Text := StringReplace(s, &apos;&amp;nbsp;&apos;, #13#10, [rfReplaceAll]);
  s := ExtractRegEx(page, regExSerieTerminee);
  if (s = &apos;null&apos;) or (s = &apos;0&apos;) then
    AlbumToImport.Serie.Terminee := 1
  else
    AlbumToImport.Serie.Terminee := 0;

  AlbumToImport.Import;
end;

function RechercheParCategorie(const Titre: string; Categorie: Integer): string;
var
  page: string;
  p, nbResultats, nbPages: Integer;
  ResultFound: Boolean;
  c: TScriptChoix;
  sResultat, Album, Serie, Auteurs, Collection: string;
  titre_album, id, commentaire: string;
  re: TBdtkRegEx;
begin
  Result := &apos;&apos;;
  p := 1;

  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    page := GetPage(urlSearchRoot + Format(urlSearchCategorie, [Categorie, p]) + Titre, False);
    nbResultats := StrToIntDef(ExtractRegEx(page, regExResultsCategorieNb), 0);
    nbPages := nbResultats div 20;
    if nbResultats mod 20 &gt; 0 then nbPages := nbPages + 1;
    ResultFound := nbResultats &gt; 0;

    while ResultFound do
    begin
      if re.BeginSearch(ExtractRegExGroup(page, regExResultsCategorie, &apos;Resultats&apos;), regExResultsCategorieLigne) then
        while re.Find(sResultat) do begin
          Album := ExtractRegExGroup(sResultat, regExResultsCategorieLigneDecoupe, &apos;Album&apos;);
          titre_album := ExtractRegExGroup(Album, regExResultsItems, &apos;Label&apos;);
          id := ExtractRegExGroup(Album, regExResultsItems, &apos;Lien&apos;);

          commentaire := &apos;&apos;;
          Serie := ExtractRegExGroup(sResultat, regExResultsCategorieLigneDecoupe, &apos;Serie&apos;);
          Serie := ExtractRegExGroup(Serie, regExResultsItems, &apos;Label&apos;)
          AjoutString1(commentaire, ExtractRegExGroup(Serie, regExResultsSerie, &apos;TitreSerie&apos;), #13#10, &apos;S&#xE9;rie: &apos;, &apos;&apos;);
          with TBdtkRegEx.Create do
            try
              Auteurs := &apos;&apos;;
              if BeginSearch(ExtractRegExGroup(sResultat, regExResultsCategorieLigneDecoupe, &apos;Auteurs&apos;), regExResultsItems) then
                while Next do
                  AjoutString2(Auteurs, GetCaptureByName(&apos;Label&apos;), &apos;, &apos;);
              AjoutString1(commentaire, Auteurs, #13#10, &apos;Auteurs: &apos;, &apos;&apos;);
            finally
              Free;
            end;
          Collection := ExtractRegExGroup(sResultat, regExResultsCategorieLigneDecoupe, &apos;Collection&apos;);
          AjoutString1(commentaire, ExtractRegExGroup(Collection, regExResultsItems, &apos;Label&apos;), #13#10, &apos;Collection: &apos;, &apos;&apos;);

          c.AjoutChoix(&apos;Album&apos;, titre_album, commentaire, id);
        end;

      ResultFound := p &lt; nbPages;
      p := p + 1;
      if ResultFound then
        page := GetPage(urlSearchRoot + Format(urlSearchCategorie, [Categorie, p]) + Titre, False);
    end;

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

function RechercheParTitre(const Titre: string): string;
var
  page, sResultat: string;
  re: TBdtkRegEx;
  c: TScriptChoix;
  id, titre_album, commentaire: string;
  Album, Auteurs, Serie, Collection: string;
begin
  Result := &apos;&apos;;

  page := GetPage(urlSearchRoot + urlSearchGlobale + Titre, False);

  c := TScriptChoix.Create;
  re := TBdtkRegEx.Create;
  try
    c.Titre := &apos;R&#xE9;sultats de recherche de &quot;&apos; + Titre + &apos;&quot;&apos;;
    if re.BeginSearch(ExtractRegEx(page, regExResultsGlobale), regExResultsGlobaleLigne) then
      while re.Find(sResultat) do begin
        Album := ExtractRegExGroup(sResultat, regExResultsGlobaleLigneDecoupe, &apos;Album&apos;);
        titre_album := ExtractRegExGroup(Album, regExResultsItems, &apos;Label&apos;);
        id := ExtractRegExGroup(Album, regExResultsItems, &apos;Lien&apos;);

        commentaire := &apos;&apos;;
        Serie := ExtractRegExGroup(sResultat, regExResultsGlobaleLigneDecoupe, &apos;Serie&apos;);
        Serie := ExtractRegExGroup(Serie, regExResultsItems, &apos;Label&apos;)
        AjoutString1(commentaire, ExtractRegExGroup(Serie, regExResultsSerie, &apos;TitreSerie&apos;), #13#10, &apos;S&#xE9;rie: &apos;, &apos;&apos;);
        with TBdtkRegEx.Create do
          try
            Auteurs := &apos;&apos;;
            if BeginSearch(ExtractRegExGroup(sResultat, regExResultsGlobaleLigneDecoupe, &apos;Auteurs&apos;), regExResultsItems) then
              while Next do
                AjoutString2(Auteurs, GetCaptureByName(&apos;Label&apos;), &apos;, &apos;);
            AjoutString1(commentaire, Auteurs, #13#10, &apos;Auteurs: &apos;, &apos;&apos;);
          finally
            Free;
          end;
        Collection := ExtractRegExGroup(sResultat, regExResultsGlobaleLigneDecoupe, &apos;Collection&apos;);
        AjoutString1(commentaire, ExtractRegExGroup(Collection, regExResultsItems, &apos;Label&apos;), #13#10, &apos;Collection: &apos;, &apos;&apos;);

        c.AjoutChoix(&apos;Album&apos;, titre_album, commentaire, id);
      end;

    if c.ChoixCount &gt; 0 then
      Result := c.Show
    else
      ShowMessage(&apos;La recherche n&apos;&apos;a pas retourn&#xE9; de r&#xE9;sultat.&apos;);
  finally
    re.Free;
    c.Free;
  end;
end;

var
  id_album, entry: string;
  index: integer;
begin
  entry := AlbumToImport.DefaultSearch;
  index := 0;
  if not AskSearchEntry([&apos;Titre de l&apos;&apos;album ou de la s&#xE9;rie&apos;, &apos;Titre de l&apos;&apos;album&apos;, &apos;Titre de la s&#xE9;rie&apos;, &apos;Lien&apos;], entry, index) then Exit;

  id_album := &apos;&apos;;
  case index of
    0: id_album := RechercheParTitre(entry);
    1: id_album := RechercheParCategorie(entry, 3);
    2: id_album := RechercheParCategorie(entry, 2);
    3: id_album := entry
  end;

  if id_album &lt;&gt; &apos;&apos; then
    ParseAlbum(id_album);
end.</Code>
</Script>
