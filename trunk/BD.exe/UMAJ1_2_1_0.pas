unit UMAJ1_2_1_0;

interface

implementation

uses JvUIB, Updates;

procedure MAJ1_2_1_0(Query: TJvUIBScript);
begin
  with Query do begin
    Script.Clear;

    Script.Add('ALTER TABLE PARABD DROP TITREINITIALESPARABD;');
    Script.Add('ALTER TABLE ALBUMS DROP TITREINITIALESALBUM;');

    Script.Add('DECLARE EXTERNAL FUNCTION UDF_UPPERBLOB BLOB, BLOB RETURNS PARAMETER 2 ENTRY_POINT ''UpperBlob'' MODULE_NAME ''BDT_UDF.dll'';');

    Script.Add('ALTER TRIGGER ALBUMS_DV');
    Script.Add('ACTIVE BEFORE INSERT OR UPDATE POSITION 0');
    Script.Add('AS');
    Script.Add('begin');
    Script.Add('  if (new.TitreAlbum is null) then begin');
    Script.Add('    new.UpperTitreAlbum = null;');
    Script.Add('    new.SoundexTitreAlbum = null;');
    Script.Add('    new.initialetitreAlbum = null;');
    Script.Add('  end else');
    Script.Add('  if (inserting or old.TitreAlbum is null or new.TitreAlbum <> old.TitreAlbum) then begin');
    Script.Add('    new.UpperTitreAlbum = UDF_UPPER(new.TitreAlbum);');
    Script.Add('    new.SoundexTitreAlbum = UDF_SOUNDEX(new.TitreAlbum, 1);');
    Script.Add('    select initiale from get_initiale(new.UpperTitreAlbum) into new.initialetitreAlbum;');
    Script.Add('  end');
    Script.Add('  if (new.sujetalbum is null) then');
    Script.Add('    new.UPPERsujetAlbum = null;');
    Script.Add('  else');
    Script.Add('    new.UPPERsujetAlbum = UDF_UPPERBLOB(new.sujetalbum);');
    Script.Add('  if (new.remarquesalbum is null) then');
    Script.Add('    new.UPPERRemarquesAlbum = null;');
    Script.Add('  else');
    Script.Add('    new.UPPERRemarquesAlbum = UDF_UPPERBLOB(new.remarquesalbum);');
    Script.Add('end;');

    Script.Add('ALTER TRIGGER PARABD_DV');
    Script.Add('ACTIVE BEFORE INSERT OR UPDATE POSITION 0');
    Script.Add('AS');
    Script.Add('begin');
    Script.Add('  if (new.TitreParaBD is null) then begin');
    Script.Add('    new.UpperTitreParaBD = null;');
    Script.Add('    new.SoundexTitreParaBD = null;');
    Script.Add('    new.initialetitreParaBD = null;');
    Script.Add('  end else');
    Script.Add('  if (inserting or old.TitreParaBD is null or new.TitreParaBD <> old.TitreParaBD) then begin');
    Script.Add('    new.UpperTitrePARABD = UDF_UPPER(new.TitrePARABD);');
    Script.Add('    new.SoundexTitrePARABD = UDF_SOUNDEX(new.TitrePARABD, 1);');
    Script.Add('    select initiale from get_initiale(new.UpperTitrePARABD) into new.initialetitrePARABD;');
    Script.Add('  end');
    Script.Add('  if (new.description is null) then');
    Script.Add('    new.upperdescription = null;');
    Script.Add('  else');
    Script.Add('    new.upperdescription = UDF_UPPERBLOB(new.description);');
    Script.Add('end;');

    Script.Add('ALTER TRIGGER SERIES_DV');
    Script.Add('ACTIVE BEFORE INSERT OR UPDATE POSITION 0');
    Script.Add('AS');
    Script.Add('begin');
    Script.Add('  if (inserting or new.titreserie <> old.titreserie) then begin');
    Script.Add('    new.uppertitreserie = UDF_UPPER(new.titreserie);');
    Script.Add('    new.SoundexTitreSerie = UDF_SOUNDEX(new.TitreSerie, 1);');
    Script.Add('    select initiale from get_initiale(new.uppertitreserie) into new.initialetitreserie;');
    Script.Add('  end');
    Script.Add('  if (new.sujetserie is null) then');
    Script.Add('    new.UPPERsujetserie = null;');
    Script.Add('  else');
    Script.Add('    new.UPPERsujetserie = UDF_UPPERBLOB(new.sujetserie);');
    Script.Add('  if (new.remarquesserie is null) then');
    Script.Add('    new.UPPERRemarquesserie = null;');
    Script.Add('  else');
    Script.Add('    new.UPPERRemarquesserie = UDF_UPPERBLOB(new.remarquesserie);');
    Script.Add('end;');

    Script.Add('ALTER TABLE SERIES ADD SUIVREMANQUANTS T_YESNO_BASEYES, ADD SUIVRESORTIES T_YESNO_BASEYES;');

    Script.Add('UPDATE SERIES SET SUIVREMANQUANTS = 1 - COALESCE(COMPLETE, 0), SUIVRESORTIES = 1 - COALESCE(TERMINEE, 0);');

    Script.Add('ALTER PROCEDURE ALBUMS_MANQUANTS (');
    Script.Add('    withintegrale smallint,');
    Script.Add('    withachat smallint,');
    Script.Add('    in_idserie char(38))');
    Script.Add('returns (');
    Script.Add('    id_serie char(38),');
    Script.Add('    countserie integer,');
    Script.Add('    titreserie varchar(150),');
    Script.Add('    uppertitreserie varchar(150),');
    Script.Add('    tome integer,');
    Script.Add('    id_editeur char(38),');
    Script.Add('    nomediteur varchar(50),');
    Script.Add('    id_collection char(38),');
    Script.Add('    nomcollection varchar(50))');
    Script.Add('as');
    Script.Add('declare variable maxserie integer;');
    Script.Add('declare variable currenttome integer;');
    Script.Add('declare variable ownedtome integer;');
    Script.Add('declare variable achat smallint;');
    Script.Add('declare variable sumachat integer;');
    Script.Add('begin');
    Script.Add('  if (WITHINTEGRALE is null) then WITHINTEGRALE = 1;');
    Script.Add('  if (WITHACHAT is null) then WITHACHAT = 1;');
    Script.Add('  for select');
    Script.Add('        A.id_serie,');
    Script.Add('        max(TOME),');
    Script.Add('        count(distinct TOME),');
    Script.Add('        cast(sum(ACHAT) as integer),');
    Script.Add('        S.id_editeur,');
    Script.Add('        NOMEDITEUR,');
    Script.Add('        S.id_collection,');
    Script.Add('        NOMCOLLECTION');
    Script.Add('      from liste_tomes(:WITHINTEGRALE, :in_idserie) A');
    Script.Add('         /* pas de left join: on cherche les manquants pour compléter les séries */');
    Script.Add('         inner join SERIES S on A.ID_SERIE = S.ID_SERIE');
    Script.Add('         left join EDITEURS E on S.ID_EDITEUR = E.ID_EDITEUR');
    Script.Add('         left join COLLECTIONS C on S.id_collection = C.ID_COLLECTION');
    Script.Add('      where S.SUIVREMANQUANTS = 1');
    Script.Add('      group by A.id_serie, UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION,');
    Script.Add('               S.id_editeur, NOMEDITEUR, S.id_collection, NOMCOLLECTION');
    Script.Add('      order by UPPERTITRESERIE, UPPERNOMEDITEUR, UPPERNOMCOLLECTION');
    Script.Add('      into');
    Script.Add('        :ID_SERIE,');
    Script.Add('        :MAXSERIE,');
    Script.Add('        :COUNTSERIE,');
    Script.Add('        :SUMACHAT,');
    Script.Add('        :ID_EDITEUR,');
    Script.Add('        :NOMEDITEUR,');
    Script.Add('        :ID_COLLECTION,');
    Script.Add('        :NOMCOLLECTION');
    Script.Add('  do begin');
    Script.Add('    if (WITHACHAT = 0) then');
    Script.Add('      COUNTSERIE = COUNTSERIE - SUMACHAT;');
    Script.Add('    if (COUNTSERIE <> MAXSERIE) then begin');
    Script.Add('      CURRENTTOME = 0;');
    Script.Add('      for select distinct');
    Script.Add('            UPPERTITRESERIE,');
    Script.Add('            TITRESERIE,');
    Script.Add('            TOME,');
    Script.Add('            ACHAT');
    Script.Add('          from liste_tomes(:WITHINTEGRALE, :ID_SERIE) A inner join SERIES S on A.ID_SERIE = S.ID_SERIE');
    Script.Add('          order by TOME');
    Script.Add('          into');
    Script.Add('            :UPPERTITRESERIE,');
    Script.Add('            :TITRESERIE,');
    Script.Add('            :OWNEDTOME,');
    Script.Add('            :ACHAT');
    Script.Add('      do begin');
    Script.Add('        CURRENTTOME = CURRENTTOME + 1;');
    Script.Add('        while ((CURRENTTOME <> OWNEDTOME) and (CURRENTTOME < MAXSERIE)) do begin');
    Script.Add('          TOME = CURRENTTOME;');
    Script.Add('          suspend;');
    Script.Add('          CURRENTTOME = CURRENTTOME + 1;');
    Script.Add('        end');
    Script.Add('        if ((WITHACHAT = 0) AND (ACHAT = 1)) then begin');
    Script.Add('          TOME = OWNEDTOME;');
    Script.Add('          suspend;');
    Script.Add('        end');
    Script.Add('      end');
    Script.Add('    end');
    Script.Add('  end');
    Script.Add('end;');

    Script.Add('ALTER PROCEDURE PREVISIONS_SORTIES (');
    Script.Add('    withachat smallint,');
    Script.Add('    in_id_serie char(38))');
    Script.Add('returns (');
    Script.Add('    id_serie char(38),');
    Script.Add('    titreserie varchar(150),');
    Script.Add('    uppertitreserie varchar(150),');
    Script.Add('    tome integer,');
    Script.Add('    anneeparution integer,');
    Script.Add('    moisparution integer,');
    Script.Add('    id_editeur char(38),');
    Script.Add('    nomediteur varchar(50),');
    Script.Add('    id_collection char(38),');
    Script.Add('    nomcollection varchar(50))');
    Script.Add('as');
    Script.Add('declare variable currentidserie char(38) character set none;');
    Script.Add('declare variable oldidserie char(38) character set none;');
    Script.Add('declare variable currenttome integer;');
    Script.Add('declare variable sommeponderee integer;');
    Script.Add('declare variable comptealbum integer;');
    Script.Add('declare variable currentannee integer;');
    Script.Add('declare variable currentmois integer;');
    Script.Add('declare variable tomeprecedent integer;');
    Script.Add('declare variable anneeprecedente integer;');
    Script.Add('declare variable moisprecedent integer;');
    Script.Add('declare variable diffmois integer;');
    Script.Add('begin');
    Script.Add('  if (withachat is Null) then withachat = 1;');
    Script.Add('  oldidserie = NULL;');
    Script.Add('  tomeprecedent = -1;');
    Script.Add('  anneeprecedente = -1;');
    Script.Add('  moisprecedent = null;');
    Script.Add('  for select TOME, ANNEEPARUTION, MOISPARUTION, s.ID_SERIE');
    Script.Add('      /* pas de left join: on calcul les prévisions de sorties des nouveautés des séries */');
    Script.Add('      from albums a inner join series s on s.ID_SERIE = a.id_serie');
    Script.Add('      where s.suivresorties = 1');
    Script.Add('            and a.horsserie = 0 and a.integrale = 0 and a.anneeparution is not null');
    Script.Add('            and (:in_id_serie is null or s.ID_SERIE = :in_id_serie)');
    Script.Add('            and (:withachat = 1 or achat = 0)');
    Script.Add('      order by s.ID_SERIE, TOME');
    Script.Add('      into :CURRENTTOME, :CURRENTANNEE, :CURRENTMOIS, :currentidserie');
    Script.Add('  do begin');
    Script.Add('    if (oldidserie is null or currentidserie <> oldidserie) then begin');
    Script.Add('');
    Script.Add('      if (oldidserie IS NOT NULL and comptealbum > 0) then begin');
    Script.Add('        select ID_SERIE, TITRESERIE, UPPERTITRESERIE,');
    Script.Add('               TOME, ANNEEPARUTION, MOISPARUTION,');
    Script.Add('               ID_EDITEUR, NOMEDITEUR,');
    Script.Add('               ID_COLLECTION, NOMCOLLECTION');
    Script.Add('        from CALCUL_ANNEE_SORTIE(:withachat, :oldidserie, :sommeponderee, :comptealbum, :tomeprecedent, :anneeprecedente, :moisprecedent)');
    Script.Add('        into :ID_SERIE, :TITRESERIE, :UPPERTITRESERIE,');
    Script.Add('             :TOME, :ANNEEPARUTION, :MOISPARUTION,');
    Script.Add('             :ID_EDITEUR, :NOMEDITEUR,');
    Script.Add('             :ID_COLLECTION, :NOMCOLLECTION;');
    Script.Add('        suspend;');
    Script.Add('      end');
    Script.Add('');
    Script.Add('      oldidserie = currentidserie;');
    Script.Add('      sommeponderee = 0;');
    Script.Add('      comptealbum = 0;');
    Script.Add('      tomeprecedent = -1;');
    Script.Add('      anneeprecedente = -1;');
    Script.Add('      moisprecedent = -1;');
    Script.Add('    end');
    Script.Add('    if (tomeprecedent <> -1 and CURRENTTOME - TOMEPRECEDENT <> 0) then begin');
    Script.Add('      if (CURRENTMOIS is null or MOISPRECEDENT is null) then');
    Script.Add('        diffmois = 0;');
    Script.Add('      else');
    Script.Add('        diffmois = CURRENTMOIS - MOISPRECEDENT;');
    Script.Add('      /* non pondéré: sommeponderee = sommeponderee + (((CURRENTANNEE - ANNEEPRECEDENTE) * 12 + (COALESCE(CURRENTMOIS, 1) - COALESCE(MOISPRECEDENT, 1))) / (CURRENTTOME - TOMEPRECEDENT)); */');
    Script.Add('      sommeponderee = sommeponderee + (((CURRENTANNEE - ANNEEPRECEDENTE) * 12 + diffmois) / (CURRENTTOME - TOMEPRECEDENT)) * CURRENTTOME;');
    Script.Add('      /* non pondéré: comptealbum = comptealbum + 1;*/');
    Script.Add('      comptealbum = comptealbum + CURRENTTOME;');
    Script.Add('    end');
    Script.Add('    tomeprecedent = CURRENTTOME;');
    Script.Add('    anneeprecedente = CURRENTANNEE;');
    Script.Add('    moisprecedent = CURRENTMOIS;');
    Script.Add('  end');
    Script.Add('');
    Script.Add('  if (oldidserie IS NOT NULL and comptealbum > 0) then begin');
    Script.Add('    select ID_SERIE, TITRESERIE, UPPERTITRESERIE,');
    Script.Add('           TOME, ANNEEPARUTION, MOISPARUTION,');
    Script.Add('           ID_EDITEUR, NOMEDITEUR,');
    Script.Add('           ID_COLLECTION, NOMCOLLECTION');
    Script.Add('    from CALCUL_ANNEE_SORTIE(:withachat, :oldidserie, :sommeponderee, :comptealbum, :tomeprecedent, :anneeprecedente, :moisprecedent)');
    Script.Add('    into :ID_SERIE, :TITRESERIE, :UPPERTITRESERIE,');
    Script.Add('         :TOME, :ANNEEPARUTION, :MOISPARUTION,');
    Script.Add('         :ID_EDITEUR, :NOMEDITEUR,');
    Script.Add('         :ID_COLLECTION, :NOMCOLLECTION;');
    Script.Add('    suspend;');
    Script.Add('  end');
    Script.Add('end;');

    ExecuteScript;
  end;
end;

initialization
  RegisterUpdate('1.2.1.0', @MAJ1_2_1_0);

end.

